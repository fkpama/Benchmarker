resources:
 repositories:
   - repository: BuildTools
     type: git
     name: Framework/BuildTools
     ref: dev

trigger:
  branches:
    include:
      - web-extension

  paths:
    include:
      - src/DevOps

pool:
  vmImage: ubuntu-latest

parameters:
  - name: PublishExtension
    default: false

variables:
- group: Benchmarker

- name: BuildToolsDirectory
  readonly: true
  value: BuildTools/

- name: SourcesDirectory
  readonly: true
  value: Benchmarker/

- name: WebDirectory
  readonly: true
  value: $(SourcesDirectory)/src/DevOps/

- name: ExtensionRootDirectory
  readonly: true
  value: $(WebDirectory)Extension

- name: CorePackageDirectory
  value: $(WebDirectory)Package

- name: BuildToolsPackageDirectory
  readonly: true
  value: $(WebDirectory)Package

- name: TsGenProjects
  value: $(WebDirectory)**/*TsGen.csproj


steps:
- checkout: BuildTools

- checkout: self
  
- task: Npm@1
  displayName: Npm install
  inputs:
    command: 'install'
    workingDir: $(ExtensionRootDirectory)

- task: Npm@1
  displayName: Run Tests
  inputs:
    command: 'custom'
    workingDir: $(ExtensionRootDirectory)
    customCommand: 'run test'

- task: DotNetCoreCLI@2
  displayName: Generate Typings
  inputs:
    command: 'build'
    projects: '$(TsGenProjects)'

- task: PowerShell@2
  displayName: Build Modules
  inputs:
    targetType: inline
    workingDirectory: $(WebDirectory)
    script: |
      Import-Module $(BuildToolsDirectory)/Pipelines/Utils.ps1

      Log-Info "Generating Common Module"
      Set-Location .\Common
      npm run build

- task: Bash@3
  displayName: Build Vsix
  inputs:
    targetType: 'inline'
    script: |
      vso='##vso'
      errPrefix="${vso}[task.logissue type=error]"
      pat_file=pat.txt

      set +e -x
      pat=$(Benchmarker.AccessToken)
      [ "${pat}x" == "x" ] && \
        echo "${errPrefix}Build access token missing" && \
        exit 1

      cd $(ExtensionRootDirectory) && \
      echo "$(Benchmarker.AccessToken)" > "$pat_file" && \
      npx webpack build --env vsix-output-dir=$(Build.ArtifactStagingDirectory)
      rc=$?

      extpath=$(find '$(Build.ArtifactStagingDirectory)' -type f -name 'sw-*.vsix' -exec readlink -f '{}' \;)

      nbLines=$(echo $extpath | wc -l)
      [[ $nbLines > 1 ]] && \
      echo -e "##[error]Multiple vsix extension files found:\n$extpath" && \
      exit 1

      [[ $nbLines == 0 ]] && \
      echo -e "##[error]No .vsix files found in directory $(Build.ArtifactStagingDirectory)" && \
      ls '$(Build.ArtifactStagingDirectory)' && \
      exit 1

      echo "##vso[task.setvariable variable=Extension.VsixPath]$extpath"

      rm -f $pat_file
      exit $rc

- ${{ if parameters.PublishExtension }}
- task: PowerShell@2
  displayName: Publish Extension
  inputs:
    workingDirectory: $(ExtensionRootDirectory)
    filePath: $(SourcesDirectory)build/scripts/Publish-Extension.ps1
    arguments: -PAT '$(Benchmarker.AccessToken)' "$(Extension.VsixPath)"
